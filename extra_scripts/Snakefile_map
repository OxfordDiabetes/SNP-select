configfile: "snakemake_config_map.yaml"


rule all:
  input:
    config["output_dir"] + config["basename"] + "_" + config["variant_caller"] + ".vcf.gz"


rule Merg_files:
  input:
    config["merge_files"]["input_dir"]
  output:
    config["output_dir"] + config["basename"] + ".fasta.gz",
    config["output_dir"] + "RG_tag_list_" + config["basename"] + ".txt"
  shell:
    "python3 normal_RG_tag_to_header.py -d {input} -o {output[0]}"

rule Bwa_mem:
  input:
    config["reference_genome"],
    config["output_dir"] + config["basename"] + ".fasta.gz"
  threads:
    8
  output:
    config["output_dir"] + config["basename"] + ".sam"
  shell:
    "bwa mem -t {threads} -C {input[0]} {input[1]} > {output}"

rule RG_to_sam_file_header:
  input:
    config["output_dir"] + config["basename"] + ".sam",
    config["output_dir"] + "RG_tag_list_" + config["basename"] + ".txt"
  output:
    config["output_dir"] + config["basename"] + ".bam",
    config["output_dir"] + "sorted_" + config["basename"] + ".bam"
  shell:
    "python3 RG_to_sam.py -s {input[0]} -r {input[1]} -o {output[0]}"

if config["variant_caller"] == "samtools":

  rule samtools:
    input:
      config["reference_genome"],
      config["output_dir"] + "sorted_" + config["basename"] + ".bam"
    threads:
      8
    output:
      config["output_dir"] + config["basename"] + "_" + config["variant_caller"] + ".vcf.gz"
    shell:
        "samtools mpileup -uf {input[0]} {input[1]} -d 1000000 --output-tags DP,AD,ADF,ADR,SP | bcftools call -mv --threads {threads} | bgzip -c > {output}"

elif config["variant_caller"] == "freebayes":

  rule freebayes:
    input:
      config["reference_genome"][:-3],
      config["output_dir"] + "sorted_" + config["basename"] + ".bam"
    threads:
      8
    output:
      config["output_dir"] + config["basename"] + "_" + config["variant_caller"] + ".vcf.gz"
    shell:
        "freebayes -f {input[0]} {input[1]} | bgzip -c > {output}"
#
